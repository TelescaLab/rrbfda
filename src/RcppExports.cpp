// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_pval
double get_pval(arma::mat eta, arma::uword nreg, arma::uword ldim);
RcppExport SEXP _rbfda_get_pval(SEXP etaSEXP, SEXP nregSEXP, SEXP ldimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nreg(nregSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ldim(ldimSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pval(eta, nreg, ldim));
    return rcpp_result_gen;
END_RCPP
}
// reshape_nreg
arma::mat reshape_nreg(arma::mat eta, arma::uword nsub, arma::uword nreg);
RcppExport SEXP _rbfda_reshape_nreg(SEXP etaSEXP, SEXP nsubSEXP, SEXP nregSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nsub(nsubSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nreg(nregSEXP);
    rcpp_result_gen = Rcpp::wrap(reshape_nreg(eta, nsub, nreg));
    return rcpp_result_gen;
END_RCPP
}
// postcheck
Rcpp::List postcheck(Rcpp::List mcmc, arma::uword refdist_samples);
RcppExport SEXP _rbfda_postcheck(SEXP mcmcSEXP, SEXP refdist_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mcmc(mcmcSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type refdist_samples(refdist_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(postcheck(mcmc, refdist_samples));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _rbfda_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _rbfda_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _rbfda_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _rbfda_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc
Rcpp::List run_mcmc(arma::mat response, arma::mat design, arma::mat basis, arma::vec time, arma::mat penalty, arma::uword ldim, arma::uword iter, arma::uword burnin, arma::uword thin, Rcpp::Nullable<Rcpp::List> init_, std::string covstruct);
RcppExport SEXP _rbfda_run_mcmc(SEXP responseSEXP, SEXP designSEXP, SEXP basisSEXP, SEXP timeSEXP, SEXP penaltySEXP, SEXP ldimSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP init_SEXP, SEXP covstructSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ldim(ldimSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< std::string >::type covstruct(covstructSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc(response, design, basis, time, penalty, ldim, iter, burnin, thin, init_, covstruct));
    return rcpp_result_gen;
END_RCPP
}
// delta_eta_diff
arma::vec delta_eta_diff(arma::mat& delta_eta1, arma::mat& delta_eta2, arma::mat& eta, arma::mat& beta, arma::mat& xi_eta, double a1, double a2, arma::uword nsub, arma::uword nreg, arma::uword ldim, arma::uword designdim, arma::mat& design);
RcppExport SEXP _rbfda_delta_eta_diff(SEXP delta_eta1SEXP, SEXP delta_eta2SEXP, SEXP etaSEXP, SEXP betaSEXP, SEXP xi_etaSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP nsubSEXP, SEXP nregSEXP, SEXP ldimSEXP, SEXP designdimSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type delta_eta1(delta_eta1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta_eta2(delta_eta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xi_eta(xi_etaSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nsub(nsubSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nreg(nregSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ldim(ldimSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type designdim(designdimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_eta_diff(delta_eta1, delta_eta2, eta, beta, xi_eta, a1, a2, nsub, nreg, ldim, designdim, design));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rbfda_get_pval", (DL_FUNC) &_rbfda_get_pval, 3},
    {"_rbfda_reshape_nreg", (DL_FUNC) &_rbfda_reshape_nreg, 3},
    {"_rbfda_postcheck", (DL_FUNC) &_rbfda_postcheck, 2},
    {"_rbfda_rcpparma_hello_world", (DL_FUNC) &_rbfda_rcpparma_hello_world, 0},
    {"_rbfda_rcpparma_outerproduct", (DL_FUNC) &_rbfda_rcpparma_outerproduct, 1},
    {"_rbfda_rcpparma_innerproduct", (DL_FUNC) &_rbfda_rcpparma_innerproduct, 1},
    {"_rbfda_rcpparma_bothproducts", (DL_FUNC) &_rbfda_rcpparma_bothproducts, 1},
    {"_rbfda_run_mcmc", (DL_FUNC) &_rbfda_run_mcmc, 11},
    {"_rbfda_delta_eta_diff", (DL_FUNC) &_rbfda_delta_eta_diff, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_rbfda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
